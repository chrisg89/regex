void DisjoinOverlap_debug(Ranges& ranges, unsigned char min, unsigned char max)
{
    enum class EndpointType { eStart , eEnd};
    using Point = std::pair<unsigned char, EndpointType>;
    using Points = std::set<Point>;

    auto points = Points{};

    for (auto& range : ranges)
    {
        points.emplace(range.first, EndpointType::eStart);
        points.emplace(range.second, EndpointType::eEnd);
    }
    ranges.clear();

    auto current = min;
    for (auto& point : points)
    {

        std::cout << "--------------------------" << std::endl;
        std::cout << "current = " << current << std::endl;
        if(point.second  == EndpointType::eStart)
        {
            std::cout << "point = " << point.first << " " << "start" << std::endl;
        }
        else
        {
            std::cout << "point = " << point.first << " " << "end" << std::endl;
        }

        if(point.second == EndpointType::eStart)
        {
            if(current < point.first )
            {
                ranges.emplace_back(current, point.first-1);
                std::cout << "adds= " << current << "-" << point.first-1 << std::endl;
                current = point.first;
            }
            else
            {
                std::cout << "Ignore " << std::endl;
            }

        }
        else
        {
            ranges.emplace_back(current, point.first);
            std::cout << "insert point y= " << current << "-" << point.first << std::endl;
            current = point.first+1;
            //std::cout << "current = " << current << std::endl;
        }
    }

    if(current < max)
    {
        ranges.emplace_back(current, max);
    }
}